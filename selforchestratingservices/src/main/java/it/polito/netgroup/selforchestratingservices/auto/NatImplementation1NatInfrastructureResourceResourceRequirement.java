package it.polito.netgroup.selforchestratingservices.auto;

import java.security.*;
import java.util.*;
import java.util.stream.*;
import it.polito.netgroup.configurationorchestrator.*;
import it.polito.netgroup.configurationorchestrator.json.nat.*;
import it.polito.netgroup.selforchestratingservices.*;
import it.polito.netgroup.nffg.json.*;
import it.polito.netgroup.selforchestratingservices.declarative_new.*;
import it.polito.netgroup.selforchestratingservices.declarative.*;
import it.polito.netgroup.selforchestratingservices.declarative.infrastructureresources.*;
import it.polito.netgroup.selforchestratingservices.declarative.dirtychecker.*;

//Autogenerated file
public class NatImplementation1NatInfrastructureResourceResourceRequirement implements ResourceRequirement
{
	Variables var;
	
	public NatImplementation1NatInfrastructureResourceResourceRequirement(Variables var)
	{
		this.var = var;
	}
	
	@Override
	public Class getResourceClass() {
		return NatInfrastructureResource.class;
	}
	
	@Override
	public boolean checkConstraint(Collection<Resource> r)
	{
		TimeoutMap<String,HostNat> active_hosts = null;
		try
		{
			active_hosts = var.getVar("active_hosts",TimeoutMap.class);
		}catch(Exception e){
			e.printStackTrace();
		}

		ArrayList<Host> hosts = null;
		try
		{
			hosts = var.getVar("hosts",ArrayList.class);
		}catch(Exception e){
			e.printStackTrace();
		}

		String lbport = null;
		try
		{
			lbport = var.getVar("lbport",String.class);
		}catch(Exception e){
			e.printStackTrace();
		}

		String lbmac = null;
		try
		{
			lbmac = var.getVar("lbmac",String.class);
		}catch(Exception e){
			e.printStackTrace();
		}

		Integer counter = null;
		try
		{
			counter = var.getVar("counter",Integer.class);
		}catch(Exception e){
			e.printStackTrace();
		}

		Collection<Resource> set = r.stream().filter(x -> x.getClass().equals(this.getResourceClass()) ).collect(Collectors.toCollection(ArrayList::new));
		return ( set.size() >= 1 && set.size() <= hosts.size() + 1  );
	}
	@Override
	public double removeCost(Resource r) {
		TimeoutMap<String,HostNat> active_hosts = null;
		try
		{
			active_hosts = var.getVar("active_hosts",TimeoutMap.class);
		}catch(Exception e){
			e.printStackTrace();
		}

		ArrayList<Host> hosts = null;
		try
		{
			hosts = var.getVar("hosts",ArrayList.class);
		}catch(Exception e){
			e.printStackTrace();
		}

		String lbport = null;
		try
		{
			lbport = var.getVar("lbport",String.class);
		}catch(Exception e){
			e.printStackTrace();
		}

		String lbmac = null;
		try
		{
			lbmac = var.getVar("lbmac",String.class);
		}catch(Exception e){
			e.printStackTrace();
		}

		Integer counter = null;
		try
		{
			counter = var.getVar("counter",Integer.class);
		}catch(Exception e){
			e.printStackTrace();
		}

		try{
			return 1.0*active_hosts.values().stream().map(HostNat::getNat).collect(Collectors.toCollection(ArrayList::new)).stream().collect(Collectors.groupingBy(n->n,Collectors.counting())).entrySet().stream().max(Map.Entry.comparingByValue()).get().getValue();
		}catch(Exception e){
			return Double.NaN;
		}
	}}